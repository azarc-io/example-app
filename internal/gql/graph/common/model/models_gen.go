// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Query struct {
}

type QueryOperatorAndDate struct {
	Op    QueryOperators `json:"op" bson:"-" query:"op"`
	Value *time.Time     `json:"value,omitempty" bson:"-" query:"value"`
}

type QueryOperatorAndValue struct {
	Op    QueryOperators `json:"op" bson:"-" query:"op"`
	Value any            `json:"value,omitempty" bson:"-" query:"value"`
}

type QueryOperatorFieldAndValue struct {
	Field  string         `json:"field" bson:"-" query:"field"`
	Op     QueryOperators `json:"op" bson:"-" query:"op"`
	Value  any            `json:"value,omitempty" bson:"-" query:"value"`
	Exists *bool          `json:"exists,omitempty" bson:"-" query:"fieldExists"`
}

type QueryValue struct {
	Value any `json:"value,omitempty" bson:"-" query:"value"`
}

type TagValue struct {
	Value any `json:"Value" bson:"value" yaml:"value"`
}

type TagValues struct {
	Key    string      `json:"Key" bson:"key" yaml:"key"`
	Values []*TagValue `json:"Values,omitempty" bson:"values" yaml:"values"`
}

type ValueInput struct {
	Value string `json:"value" bson:"-"`
}

type ValueOutput struct {
	Value string `json:"value" bson:"-"`
}

type QueryOperators string

const (
	QueryOperatorsEqual              QueryOperators = "Equal"
	QueryOperatorsNotEqual           QueryOperators = "NotEqual"
	QueryOperatorsContains           QueryOperators = "Contains"
	QueryOperatorsIn                 QueryOperators = "In"
	QueryOperatorsNotIn              QueryOperators = "NotIn"
	QueryOperatorsGreaterThan        QueryOperators = "GreaterThan"
	QueryOperatorsLessThan           QueryOperators = "LessThan"
	QueryOperatorsLessThanOrEqual    QueryOperators = "LessThanOrEqual"
	QueryOperatorsGreaterThanOrEqual QueryOperators = "GreaterThanOrEqual"
	QueryOperatorsRegex              QueryOperators = "Regex"
)

var AllQueryOperators = []QueryOperators{
	QueryOperatorsEqual,
	QueryOperatorsNotEqual,
	QueryOperatorsContains,
	QueryOperatorsIn,
	QueryOperatorsNotIn,
	QueryOperatorsGreaterThan,
	QueryOperatorsLessThan,
	QueryOperatorsLessThanOrEqual,
	QueryOperatorsGreaterThanOrEqual,
	QueryOperatorsRegex,
}

func (e QueryOperators) IsValid() bool {
	switch e {
	case QueryOperatorsEqual, QueryOperatorsNotEqual, QueryOperatorsContains, QueryOperatorsIn, QueryOperatorsNotIn, QueryOperatorsGreaterThan, QueryOperatorsLessThan, QueryOperatorsLessThanOrEqual, QueryOperatorsGreaterThanOrEqual, QueryOperatorsRegex:
		return true
	}
	return false
}

func (e QueryOperators) String() string {
	return string(e)
}

func (e *QueryOperators) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = QueryOperators(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid QueryOperators", str)
	}
	return nil
}

func (e QueryOperators) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type QueryType string

const (
	QueryTypeDate    QueryType = "Date"
	QueryTypeDeleted QueryType = "Deleted"
)

var AllQueryType = []QueryType{
	QueryTypeDate,
	QueryTypeDeleted,
}

func (e QueryType) IsValid() bool {
	switch e {
	case QueryTypeDate, QueryTypeDeleted:
		return true
	}
	return false
}

func (e QueryType) String() string {
	return string(e)
}

func (e *QueryType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = QueryType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid QueryType", str)
	}
	return nil
}

func (e QueryType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RefRoot string

const (
	RefRootAppRef RefRoot = "AppRef"
)

var AllRefRoot = []RefRoot{
	RefRootAppRef,
}

func (e RefRoot) IsValid() bool {
	switch e {
	case RefRootAppRef:
		return true
	}
	return false
}

func (e RefRoot) String() string {
	return string(e)
}

func (e *RefRoot) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RefRoot(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RefRoot", str)
	}
	return nil
}

func (e RefRoot) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
